#!/usr/bin/env node
const { raw } = require('objection');
const moment = require('moment');
const Database = require('@ukhomeoffice/taskflow/lib/db');
const Task = require('@ukhomeoffice/taskflow/lib/models/task');
const settings = require('../config');

const migrate = async () => {
  const db = Database.connect(settings.taskflowDB);
  const transaction = await db.transaction();
  Task.db(db);

  const today = moment().format('YYYY-MM-DD');

  try {
    const tasks = await Task.query(transaction)
      .select('*')
      .from(builder => {
        // use a subquery to get the deadline date which can then be used in the outer where clause
        builder
          .select(
            '*',
            raw(`
              CASE
                WHEN (data->'deadline'->>'isExtended')::boolean = true
                THEN data->'deadline'->>'extended'
                ELSE data->'deadline'->>'standard'
              END AS deadline_date`
            )
          )
          .from('cases')
          .whereJsonSupersetOf('data', { model: 'project', action: 'grant' })
          .whereRaw("data \\? 'deadline'") // has a deadline property
          .whereRaw("data->>'deadlinePassed' is null") // hasn't yet been marked as passed
          .as('cases');
      })
      .where('deadlineDate', '<', today);

    console.log(`found ${tasks.length} tasks that have passed their deadlines`);

    for (const task of tasks) {
      await task.$query(transaction).patchAndFetch({ data: { ...task.data, deadlinePassed: true } });
    }

    await transaction.commit();
  } catch (e) {
    await transaction.rollback();
    throw e;
  }

  console.log('complete.');
};

migrate()
  .then(() => process.exit(0))
  .catch(e => {
    console.log(e);
    process.exit(1);
  });
