#!/usr/bin/env node
const { get, isEmpty } = require('lodash');
const moment = require('moment-business-time');
const { bankHolidays } = require('@asl/constants');
const Database = require('@ukhomeoffice/taskflow/lib/db');
const Task = require('@ukhomeoffice/taskflow/lib/models/task');
const settings = require('../config');
const { withASRU } = require('../lib/flow');

// configure bank holidays
moment.updateLocale('en', { holidays: bankHolidays });

const STANDARD_DEADLINE = 40;
const EXTENDED_DEADLINE = 55;

const patchTaskDeadline = async (task) => {
  const activityLog = await task.$relatedQuery('activityLog').orderBy('createdAt', 'asc');

  // find the last submission / extended state
  const deadline = activityLog.reduce((deadline, activity) => {
    if (activity.eventName.match(/with-inspectorate$/)) { // submission to ASRU event
      const meta = get(activity, 'event.data.meta', {});
      const isCompleteAndCorrect = ['authority', 'awerb', 'ready'].every(declaration => {
        return meta[declaration] && meta[declaration].toLowerCase() === 'yes';
      });

      if (isCompleteAndCorrect) {
        return {
          standard: moment(activity.createdAt).addWorkingTime(STANDARD_DEADLINE, 'days').format('YYYY-MM-DD'),
          extended: moment(activity.createdAt).addWorkingTime(EXTENDED_DEADLINE, 'days').format('YYYY-MM-DD'),
          isExtended: false,
          isExtendable: true
        };
      } else {
        return {}; // submission was not complete and correct, reset deadline
      }
    }
    if (activity.eventName === 'update') { // possible deadline extend event
      deadline.isExtended = get(activity, 'event.data.extended', false);
      deadline.isExtendable = !deadline.isExtended;
    }
    return deadline;
  }, {});

  if (isEmpty(deadline)) {
    console.log(`${task.id}: no deadline required`);
    return Promise.resolve();
  }

  console.log(`${task.id}: ${JSON.stringify(deadline)}`);
  return task.$query().patchAndFetch({ data: { ...task.data, deadline } });
};

const migrate = async () => {
  const db = Database.connect(settings.taskflowDB);
  Task.db(db);

  // only need to patch tasks that have already been submitted, because the deadline object gets added on submission
  const withAsruOrComplete = withASRU().concat(['resolved', 'rejected']);

  const query = Task.query()
    .select('*')
    .whereIn('status', withAsruOrComplete)
    .whereJsonSupersetOf('data', { model: 'project', action: 'grant' })
    .whereRaw("data->>'deadline' is null"); // will match both deadline: null and missing deadline key

  const tasks = await query;
  console.log(`found ${tasks.length} tasks with no deadline property set`);

  for (const task of tasks) {
    await patchTaskDeadline(task); // process the tasks one at a time to avoid ballooning memory
  }

  console.log('complete.');
};

migrate()
  .then(() => process.exit(0))
  .catch(e => {
    console.log(e);
    process.exit(1);
  });
